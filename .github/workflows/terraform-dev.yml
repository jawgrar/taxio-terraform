name: 'Terraform'

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

env:
  TF_ACTION_WORKING_DIR: './terraform'
  TF_VAR_project_name: ${{ vars.FIREBASE_PROJECT_NAME }}
  TF_VAR_project_id: ${{ vars.FIREBASE_PROJECT_ID }}
  TF_VAR_billing_account: ${{ secrets.GCP_BILLING_ACCOUNT }}
  TF_VAR_android_app_display_name: ${{ vars.FIREBASE_ANDROID_DISPLAY_NAME }}
  TF_VAR_android_app_package_name: ${{ vars.FIREBASE_ANDROID_PACKAGE_NAME }}
  TF_VAR_ios_app_display_name: ${{ vars.FIREBASE_IOS_DISPLAY_NAME }}
  TF_VAR_ios_app_bundle_id: ${{ vars.FIREBASE_IOS_BUNDLE_ID }}
  TF_VAR_web_app_display_name: ${{ vars.FIREBASE_WEB_DISPLAY_NAME }}
  TF_VAR_firebase_region_name: ${{ vars.FIREBASE_REGION_NAME }}
  #TF_VAR_credentials_file: "service-account-key-dev.json"
  
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Setup GCP Service Account
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_email: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_EMAIL }}
        service_account_key: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        export_default_credentials: true
        
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    
    # generate firebase auth file
    #- name: Set Firebase Service Account Key
    #  run: echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" > service-account-key-dev.json

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
    #  run: terraform fmt -check
      
    # validate that all Terraform configuration files adhere to a canonical format
    - name: Terraform Validate
      run: terraform validate #-input=false

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan #-input=false

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
      run: terraform apply -auto-approve #-input=false
